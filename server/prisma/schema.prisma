generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(cuid())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  username            String       @unique
  hashedPassword      String
  Chatrooms           Chatroom[]
  Message             Message[]
  InvitationsSent     Invitation[] @relation(name: "invitations-sent")
  InvitationsRecieved Invitation[] @relation(name: "invitations-recieved")

  @@map("users")
}

model Chatroom {
  id          String       @id @default(cuid())
  name        String       @unique
  privacyMode PrivacyMode  @default(PUBLIC)
  users       User[]
  messages    Message[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Invitations Invitation[]

  @@map("chatrooms")
}

enum PrivacyMode {
  PUBLIC
  PRIVATE
}

model Message {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  Chatroom   Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId String
  content    String

  @@map("messages")
}

model Invitation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  invitedBy     User     @relation(fields: [invitedById], references: [id], name: "invitations-sent")
  invitedById   String
  invitedUser   User     @relation(fields: [invitedUserId], references: [id], name: "invitations-recieved")
  invitedUserId String
  Chatroom      Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId    String

  @@map("invitations")
}
